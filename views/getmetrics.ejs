<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Get Metrics</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.2/dist/chart.min.js"></script>
    <link rel="stylesheet" href="css/style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Truculenta:opsz,wght@12..72,200;12..72,700&display=swap"
      rel="stylesheet">
</head>

<body>
    <nav>
        <div class="navContainer">
          <p class="logo">Paws for Health</p>
          <div>
            <a class="addPetPage" href="/petspage">Pet Selection</a>
            <a class="logout" href="/logout">Log Out</a>
          </div>
        </div>
      </nav>
   <header class="metricsCont">
    <h1>View your pets activities over time</h1>
    <div class="petNameBtns">
        <form>
            <select name="petNames" id="petNames">
                <option>Select a pet</option>
            </select>
        </form>
    </div>
    <h2 class="error"></h2>
   </header>
    

    <div class="canvasContainer">
    </div>

    <script>
        //gets the pets name once selected from the dropdown
        const select = document.querySelector('#petNames')
        select.addEventListener('change', (e) => {
            const name = e.target.value
            getPetMetrics(name)
        })
        //gets pet info from the DB
        const getPets = async () => {
            const dropdown = document.querySelector("#petNames")
            try {
                const res = await fetch('/api/pets/getPets')
                const data = await res.json()
                //checks if there are any pets in the DB
                if (data.petNames.length==0){
                    document.querySelector(".error").innerText = "You currently don't have any pets logged! Please return to the pet selection page and add a pet to get started."
                    return
                }
                else {
                    data.petNames.forEach((mappedPet) => {
                        let opt = document.createElement("option")
                        opt.appendChild(document.createTextNode(mappedPet))
                        opt.value = mappedPet

                        dropdown.appendChild(opt)
                    })
                }
            } catch (err) {
                console.log(err.message)
            }
        }
        //gets pet metrics from db using pets name
        const getPetMetrics = async (petName) => {
            try {
                const res = await fetch(`/api/pets/getLoggedMetrics/${petName}`)
                const data = await res.json()
                if (!data) return
                else {
                    if (data.healthMetrics.length > 0) {
                        document.querySelector('.error').innerText = ""
                        makeGraphs(data)
                    } else {
                        clearChart()
                        document.querySelector('.error').innerText =
                            "No metrics available. Please add metrics for this pet."
                    }

                }
            } catch (err) {
                console.log(err.message)
            }
        }

        const makeGraphs = async (data) => {
            const labels = data.healthMetrics.map(metric => metric.date);
            const graphData = [];
            //creates shell data structures for each metric in graph format
            Object.keys(data.healthMetrics[0]).forEach(metric => {
                if (metric == "date" || metric == "_id") return
                const dataCollection = {
                    labels: labels,
                    datasets: [{
                        label: metric,
                        data: [],
                    }]
                }
                graphData.push(dataCollection)
            })
            //cycles through each set of health metrics
            data.healthMetrics.forEach(collection => {
                //takes each shell data structure and puts its corresponding metric values in
                graphData.forEach(graph => {
                    const pushValue = collection[graph.datasets[0].label]
                    graph.datasets[0].data.push(pushValue)
                })
            })
            //create a graph for each metric
            const canvasDiv = document.querySelector('.canvasContainer')
            graphData.forEach(graph => {
                const label = graph.datasets[0].label;
                const canvas = document.createElement('canvas')
                const chartId = 'chart' + label;
                canvas.id = chartId;
                canvas.style.width = "500px";
                canvas.style.height = "400px";
                canvasDiv.appendChild(canvas)

                const context = document.getElementById(chartId).getContext('2d')
                const dataArray = graph.datasets[0].data;
                const data = {
                    labels: labels,
                    datasets: [{
                        label: label,
                        data: dataArray,
                        borderColor: ["rgba(135, 165, 139,1)"],
                    }]
                }
                const config = {
                    type: 'line',
                    data: data,
                    options: {responsive: false}
                }

                window[chartId] = new Chart(context, config);
            })
        }
        //clears existing charts from window
        function clearChart() {
            const canvasDiv = document.querySelector('.canvasContainer')
            //deletes previously existing graphs
            while (canvasDiv.firstChild) {
                canvasDiv.removeChild(canvasDiv.firstChild)
            }
        }

        getPets()
    </script>
</body>

</html>